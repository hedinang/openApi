import React, { useState } from "react";
import { useHistory } from "react-router-dom";
import { useParams } from "react-router-dom";
import UserDataService from "services/UserService";
import { useTranslation } from "react-i18next";
import ButtonSpinner from "components/ButtonSpinner";

import { HeaderMain } from "routes/components/HeaderMain";

import {
    Button,
    Container,
    Row,
    Col,
    Card,
    CardTitle,
    CardBody,
    CustomInput,
    Form,
    FormGroup
} from "components";
import useToast from "routes/hooks/useToast";
import { InputGroup } from "reactstrap";
import { StickyFooter } from "components/StickyFooter/StickyFooter";

const OthersPassword = () => {
    let message = "Opp! Something went wrong.";
    const toast = useToast();

    const showToast = (type) => toast(type, message);

    const { t } = useTranslation();
    const history = useHistory();
    const { uuid } = useParams();
    const [passwordOption, setPasswordOption] = useState("");
    const [customPassword, setCustomPassword] = useState("");
    const [reset, setReset] = useState(true);
    const [passwordSelection, setPasswordSelection] = useState(["keepPassword", "autogeneratedPassword", "customPassword"]);
    const [isLoading, setIsLoading] = useState(false);
    const [submitted, setSubmitted] = useState(false);
    const [passwordVisible, setPasswordVisible] = useState(false);

    const passwordSelect = (e) => {
        setPasswordOption(e.target.id);
        if (e.target.id === passwordSelection[0] || passwordSelection[1]) {
            setCustomPassword("");
        }
    };

    const passwordOnCustom = (e) => {
        setCustomPassword(e.target.value);
    };

    const requireReset = (e) => {
        setReset(e.target.checked);
    };

    const handleClick = () => {
        setSubmitted(true);
        if (passwordOption !== "" && passwordOption !== passwordSelection[0]) {
            if (!(passwordOption === passwordSelection[2] && customPassword === "")) {
                setIsLoading(true);
                UserDataService.resetPassword({ uuid, password: customPassword, needResetPassword: reset })
                    .then((response) => {
                        if (response.data.status === "OK") {
                            message = "Password Changed Successfully";
                            showToast("success");
                            setIsLoading(false);
                        } else {
                            message = "Error in reseting password";
                            showToast("error");
                            setIsLoading(false);
                        }
                    }).catch((error) => {
                        message = error.response.data.message;
                        showToast("error");
                        setIsLoading(false);
                    });
            }
        }
    };

    return (
        <>
            <Container fluid>
                <HeaderMain
                    title={t("Reset Password")}
                />
                <Row>
                    <Col lg={12}>
                        <Card className="mb-2">
                            <CardBody>
                                <Row>
                                    <Col lg={6}>
                                        { /* START Radios */}
                                        <div className="mb-2">
                                            <CardTitle tag="h6">
                                                {t("Set Password")}
                                                <span className="text-danger">*</span>
                                            </CardTitle>
                                            <Form>
                                                <FormGroup>
                                                    <div onChange={passwordSelect}>
                                                        <CustomInput
                                                            type="radio"
                                                            id={passwordSelection[0]}
                                                            name="selectPassword"
                                                            label={t("Keep existing password")}
                                                        />
                                                        <CustomInput
                                                            type="radio"
                                                            id={passwordSelection[1]}
                                                            name="selectPassword"
                                                            label={t("Autogenerated password")}
                                                        />
                                                        <CustomInput
                                                            type="radio"
                                                            id={passwordSelection[2]}
                                                            name="selectPassword"
                                                            label={t("Custom password")}
                                                        />
                                                    </div>
                                                </FormGroup>
                                                <InputGroup>
                                                    {passwordOption === "customPassword" ? (
                                                        <>
                                                            <input type={passwordVisible ? "text" : "password"} className="form-control form-control-md" value={customPassword} onChange={passwordOnCustom} />
                                                            <div className="input-group-append">
                                                                <a className="input-group-text" onClick={() => setPasswordVisible(!passwordVisible)}>
                                                                    <i className={`fa ${passwordVisible ? "fa-eye-slash" : "fa-eye"}`} />
                                                                </a>
                                                            </div>
                                                        </>
                                                    ) : (
                                                        <input type={passwordVisible ? "text" : "password"} className="form-control form-control-md" value={customPassword} disabled />
                                                    )}
                                                </InputGroup>
                                            </Form>
                                        </div>
                                        {submitted && !passwordOption
                                        && <div className="text-danger">Please select how you want to set password.</div>}
                                        { /* END Radios */}
                                    </Col>
                                </Row>
                            </CardBody>
                        </Card>
                    </Col>
                </Row>
                <Row>
                    <Col lg={12}>
                        <Card className="mb-2">
                            <CardBody>
                                { /* START Checkboxes */}
                                <div className="mb-3">
                                    <CardTitle tag="h6">
                                        {t("Require Password Reset")}
                                    </CardTitle>
                                    <Form>
                                        <FormGroup>
                                            <CustomInput
                                                type="checkbox"
                                                id="checkboxesStackedCustom1"
                                                label={t("User must create a new password at next sign-in")}
                                                checked={reset}
                                                onChange={requireReset}
                                            />
                                        </FormGroup>
                                    </Form>
                                </div>
                                { /* END Checkboxes */}
                            </CardBody>
                        </Card>
                    </Col>
                </Row>
                {/* Footer */}
                <StickyFooter>
                    <Row className="mx-0 px-3 justify-content-between">
                        <Button
                            type="button"
                            color="secondary"
                            className="mr-2"
                            onClick={() => history.goBack()}
                            style={{ borderWidth: 0 }}
                        >
                            {t("Back")}
                        </Button>

                        <ButtonSpinner onclick={handleClick} className="btn btn-primary" text={t("Reset Password")} isLoading={isLoading} />

                    </Row>
                </StickyFooter>
            </Container>
        </>
    );
};

export default OthersPassword;
